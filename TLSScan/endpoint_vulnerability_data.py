from ssllabs.data.endpoint import EndpointData

from TLSScan.endpoint_translation import EndpointVulnerability


class EndpointVulnerabilityData:
    host: str
    serverName: str
    grade: str
    gradeTrustIgnored: str
    vulnerabilities: dict[EndpointVulnerability, bool | str | int | None]

    def __init__(
        self,
        host: str,
        serverName: str,
        grade: str,
        gradeTrustIgnored: str,
        vulnerabilities: dict[EndpointVulnerability, bool | str | int | None],
    ):
        self.host = host
        self.serverName = serverName
        self.grade = grade
        self.gradeTrustIgnored = gradeTrustIgnored
        self.vulnerabilities = vulnerabilities

    @staticmethod
    def from_endpoint(endpoint: EndpointData) -> "EndpointVulnerabilityData":
        if endpoint.statusMessage != "Ready":
            raise ValueError("Endpoint is not ready")
        assert endpoint.details
        assert endpoint.grade
        assert endpoint.gradeTrustIgnored
        assert endpoint

        if not endpoint.serverName:
            endpoint.serverName = ""

        return EndpointVulnerabilityData(
            host=endpoint.ipAddress,
            serverName=endpoint.serverName,
            grade=endpoint.grade,
            gradeTrustIgnored=endpoint.gradeTrustIgnored,
            vulnerabilities=EndpointVulnerability.from_endpoint_details(
                endpoint.details
            ),
        )

    def __str__(self) -> str:
        return (
            f"Host: {self.host}\n"
            f"Server Name: {self.serverName}\n"
            f"Grade: {self.grade}\n"
            f"Grade Trust Ignored: {self.gradeTrustIgnored}\n"
            + "\n".join(
                f"{vulnerability.name}: {value}"
                for vulnerability, value in self.vulnerabilities.items()
            )
        )

    def csv(self) -> list[str]:
        vulnerabilities = list(str(value) for value in self.vulnerabilities.values())
        return [
            self.host,
            self.serverName,
            self.grade,
            self.gradeTrustIgnored,
            *vulnerabilities,
        ]

    @staticmethod
    def csv_headers() -> list[str]:
        vulnerabilities = list(
            vulnerability.name for vulnerability in EndpointVulnerability
        )
        return [
            "Host",
            "Server Name",
            "Grade",
            "Grade Trust Ignored",
            *vulnerabilities,
        ]
